import torch
from torch import nn

adv_criterion = nn.MSELoss()

def get_disc_loss(real_X, fake_X, disc_X, adv_criterion):
    """
        Computes the discriminator loss based on real and fake data.

        Parameters:
        - real_X: Tensor, representing the real data.
        - fake_X: Tensor, representing the fake data generated by the generator.
        - disc_X: Discriminator model applied to the input data.
        - adv_criterion: Adversarial loss criterion used for training the discriminator.

        Returns:
        - disc_loss: The average discriminator loss value for both real and fake data.
    """
    disc_fake_X_hat = disc_X(fake_X.detach())
    disc_fake_X_loss = adv_criterion(disc_fake_X_hat, torch.zeros_like(disc_fake_X_hat))
    disc_real_X_hat = disc_X(real_X)
    disc_real_X_loss = adv_criterion(disc_real_X_hat, torch.ones_like(disc_real_X_hat))
    disc_loss = (disc_fake_X_loss + disc_real_X_loss) / 2
    return disc_loss